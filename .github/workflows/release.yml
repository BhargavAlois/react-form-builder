Skip to content
DEV Community
Find related posts...
Powered by  Algolia
Log in
Create account

4
Jump to Comments

6
Save

Boost

Cover image for How to setup Semantic Release with GitHub Actions.
Sahanon Phisetpakasit
Sahanon Phisetpakasit
Posted on Mar 29, 2024 ‚Ä¢ Edited on May 27, 2024


33
How to setup Semantic Release with GitHub Actions.
#
todayilearned
#
cicd
#
githubactions
#
tutorial
Recently, My coworker is using Nx to automate his workflow, including automated release using semantic version. I found this method quite useful, so I want to re-implement on single GitHub repositories (without Nx).

First Step: Create GitHub's Personal Access Token
You can follow this link on how to create Personal Access Token.
You can choose Fine-grained tokens as you can scope specific repositories. (Or Token (Classic))

menu

Make sure that you grant repository permission to token. For my configuration I use:

Read Access

variables
environments
metadata (default)
secrets
Read/Write Access

code
commit statuses
issue
pull requests
workflows
I might grant unnecessary permission, so feel free to correct me.

Second Step: Setup GitHub token in repository's environment
1.Go to Settings options
setting

2.Select Environments

select environment

3.Create Environment

create environment

4.Create Environment Secret

environment secret

I use GH_TOKEN to represent GITHUB_TOKEN (GitHub does not allow naming variables with prefix "GITHUB").

Third Step: Setup workflows
I use this package -> Action for Semantic Release to setup my workflow.
Use this script to create workflow



name: test
on:
  push:
    branches:
      # Change this if your primary branch is not main
      - master
      - dev

jobs:
  main:
    runs-on: ubuntu-latest
    environment:
      name: Semver #your environment name
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}


In this code snippets, it's meant to

setup environment
perform semantic release
Fourth Step: Create .releaserc
This will be semantic-release configuration file for

create release tag
create change log
define commit message convention -> conventionalcommits
Create .releaserc in your project.



{

    "branches": [

        "master",

        "dev"

    ],

    "plugins": [

        "@semantic-release/commit-analyzer",

        "@semantic-release/release-notes-generator",

        [

            "@semantic-release/changelog",

            {

                "changelogFile": "CHANGELOG.md"

            }

        ],

        [

            "@semantic-release/git",

            {

                "assets": [

                    "CHANGELOG.md"

                ]

            }

        ],

        "@semantic-release/github"



<span class="pi">]</span>



}






Final Step: Add, Commit and Push
This step will be the byproduct of your work so far.

Once you commit your code with message convention, for example, feat: add some features, it will trigger the semantic-release. Default convention message with angular preset included:

fix -> bug fixes: patch release
feat -> feature: minor release
breaking change -> break change: major release
Once you push your code it will run GitHub Action and release your project.

github action

Then it will create Release and CHANGELOG.md in the project.

release

changelog

Conclusion
semantic-release can help you automate your versioning and release. Also, It's really useful for tracking and change in document.

Feel free to comment or give feedbacks. I'm appreciate your time for reading üòÑ.

Reference
https://www.conventionalcommits.org/en/v1.0.0/
https://github.com/marketplace/actions/action-for-semantic-release

Or my sample repository -> https://github.com/Sahanon-P/semver-sample

profile
Timescale
Promoted

Image of Timescale

Timescale ‚Äì the developer's data platform for modern apps, built on PostgreSQL
Timescale Cloud is PostgreSQL optimized for speed, scale, and performance. Over 3 million IoT, AI, crypto, and dev tool apps are powered by Timescale. Try it free today! No credit card required.

Try free

Read More
Top comments (4)
Subscribe
pic
Add to the discussion
 
 
der_gopher profile image
Alex Pliutau
‚Ä¢
Jul 2 '24

Great write-up, we do it similarly but with release branches - packagemain.tech/p/github-actions-...


2
 likes
Like
Reply
 
 
sahanonp profile image
Sahanon Phisetpakasit 
‚Ä¢
Jul 2 '24

That quite nice! Thanks for sharing.


1
 like
Like
Reply
 
 
abderazak_amiar profile image
Abderazak Amiar
‚Ä¢
Jun 24 '24 ‚Ä¢ Edited on Jun 25

This is an amazing article, helped me a lot, thank you very much @sahanonp.


2
 likes
Like
Reply
 
 
sahanonp profile image
Sahanon Phisetpakasit 
‚Ä¢
Jun 25 '24

Thanks! Glad that my article could help üòÄ.
Have fun coding üëç.


2
 likes
Like
Reply
Code of Conduct ‚Ä¢ Report abuse
profile
Pieces.app
Promoted

A Workflow Copilot. Tailored to You.
Pieces.app image

Our desktop app, with its intelligent copilot, streamlines coding by generating snippets, extracting code from screenshots, and accelerating problem-solving.

Read the docs

Read next
nowsathk profile image
Securely access Amazon EKS with GitHub Actions and OpenID Connect
Nowsath - Jan 14

jetthoughts-dev profile image
Building The World's Best Image Diffusion Model
JetThoughts Dev - Jan 14

grbeno profile image
Using React as Static Files in Django: Step-by-Step Guide
grbeno - Jan 13

luca1iu profile image
Mastering SQL Joins - Inner, Outer, Cross, and Self-Joins with Examples
Luca Liu - Jan 13


Sahanon Phisetpakasit
Follow
Passionate in software development and process. Aim to be 10x and Sufficient engineer.
Location
Bangkok, Thailand
Education
Software Engineer at Kasetsart University
Work
Full-time Developer at NDID
Joined
Jul 21, 2022
More from Sahanon Phisetpakasit
Funny mistake when I was using Axios Interceptor.
#react #todayilearned
Setup Docker for integration testing in GitHub Action.
#docker #testing #beginners #todayilearned
profile
Timescale
Promoted

Image of Timescale

Timescale ‚Äì the developer's data platform for modern apps, built on PostgreSQL
Timescale Cloud is PostgreSQL optimized for speed, scale, and performance. Over 3 million IoT, AI, crypto, and dev tool apps are powered by Timescale. Try it free today! No credit card required.

Try free



name: test
on:
  push:
    branches:
      - master
jobs:
  main:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}